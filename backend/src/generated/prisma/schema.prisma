// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model User {
  id        String   @id @default(uuid())
  name      String?
  email     String   @unique
  role      UserRole @default(USER)
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  problem       Problem[]
  submissions   Submission[]
  SovledProblem SolvedProblem[]
  playlist      Playlist[]
}

model Problem {
  id          String     @id @default(uuid())
  title       String
  description String
  difficulty  Difficulty
  tags        String[]
  userId      String
  examples    Json
  hints       String?
  editorial   String?
  constraints String?

  testcases          Json // 
  codeSnippets       Json
  referenceSolutions Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //  Relationship
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  submission        Submission[]
  solvedProblem     SolvedProblem[]
  problemInPlaylist ProblemInPlaylist[]
}

// one use can submit many times
model Submission {
  id            String   @id @default(uuid())
  problemId     String
  userId        String
  sourceCode    Json
  language      String
  stdin         String?
  stdout        String?
  stderr        String?
  compileOutput String?
  status        String // Accepted , wrong answer
  memory        String?
  time          String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  //  Relationship
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  testCases TestCase[]
}

// each test detail
model TestCase {
  id            String   @id @default(uuid())
  submissionId  String
  testCase      Int
  passed        Boolean
  stdout        String?
  expected      String
  stderr        String?
  compileOutput String?
  status        String
  memory        String?
  time          String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  //  Relationship
  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
}

// one user can tick one probklem as solved as 1 time
model SolvedProblem {
  id        String @id @default(uuid())
  problemId String
  userId    String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([problemId, userId])
}

model Playlist {
  id          String   @id @default(uuid())
  userId      String
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  problemsInPlaylist ProblemInPlaylist[]

  @@unique([name, userId]) // every user cant have 2 same name playlist
}

model ProblemInPlaylist {
  id         String   @id @default(uuid())
  playlistId String
  problemId  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)

  @@unique([problemId, playlistId]) // every playlist shouls have unique problem
}
